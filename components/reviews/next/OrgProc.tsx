import { Flex, Image as ChakraImage, ListItem, Text } from '@chakra-ui/react'
import { Paragraph, PostList } from 'components/blog/PostElements'
import { Code, ExternalLink, ImageContribution, ImageWrapper, OrganizationDescription, SubScore } from 'components/reviews/common'
import { stage4score } from 'constants/scores/next'
import Image from 'next/image'

export default function OrgProc() {
  return (
    <>
      <ImageWrapper>
        <Image priority layout='fill' src='/img/blog/remix/org1.jpg' objectFit='cover' objectPosition='0 57%'/>   
        <Flex pos='relative' zIndex='2' margin='0 auto' align='center'>
          <ChakraImage className='svg' width='90px' height='90px' src='/img/blog/remix/org.svg' />
        </Flex>
      </ImageWrapper>
      <ImageContribution>Photo by <a href="https://unsplash.com/@hugorrocha?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText" target='_blank'>Hugo Rocha</a> on <a href="https://unsplash.com/s/photos/sticky?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText" target='_blank'>Unsplash</a></ImageContribution>
      <OrganizationDescription />
      <Paragraph minorNext>
        Many process related aspects of full stack frontend frameworks depend on the deployment target and the workflows it supports.
        The real goal is to choose the infrastructure and work processes that minimize
        wastes like overdelivering, waiting or inventory. In practice, this means that you should
        not set up a complex system if the project needs don't justify it. I will go into more technical details at Stage 8.
      </Paragraph>
      <Paragraph minorNext id='full-stack-support'>
        <b>Full stack development</b>: An impactful feature of Next.js in this area is that it supports efficient full stack development through its:
        <PostList minor>
          <>
            <ListItem>
              <b>Isomorphic paradigm</b>: JS is on both sides of the network, so there's no mental context switching required
            </ListItem>
            <ListItem>
              <b>Data loading convention</b>: <Code>getStaticProps</Code>, <Code>getServerSideProps</Code> and the kind-of-deprecated <Code>getInitialProps</Code>
            </ListItem>
            <ListItem>
              <b>Rapid API development capability</b>: You know, with API routes inside: <Code>/pages/api/</Code> or
              with better code colocation through using <ExternalLink href='https://next-runtime.meijer.ws/getting-started/1-introduction'>
                next-runtime
              </ExternalLink>
            </ListItem>
            <ListItem>
              <b>Serverless deployment support</b>: As mentioned earlier: zero maintenance, infinite scale <i>(and budget required...)</i>
            </ListItem>
            <ListItem>
              <b>Integrations</b>: with modern tools like <ExternalLink href='https://www.prisma.io/nextjs'>
                Prisma
              </ExternalLink> or <ExternalLink href='https://fauna.com/blog/using-next-js-with-fauna-and-graphql'>FaunaDB</ExternalLink>
            </ListItem>
          </>
        </PostList>
        These all add up to eliminate process wastes like
        underutilization, defects, motion and waiting. That, in turn, means if the developers have the right skill set, they can
        work more efficiently by removing the overhead generated by a split BE/FE setup. 
      </Paragraph>
      <Paragraph minorNext id='organizational-scalability'>
        <b>Organizational scalability</b>: The framework is batteries-included and opinionated in a few ways that really help
        organizations to unify frontend development across many services or projects. A new "feature" from version 11
        called <ExternalLink href='https://nextjs.org/blog/next-11#conformance'>Conformance</ExternalLink> gives
        very valuable guidance to follow best-practices, improving the default quality of
        every Next.js based product. <i>(Here's a nice <ExternalLink href='https://blog.kieranroberts.dev/what-the-hell-is-conformance-highlighted-in-nextjs-11'>
          introduction
        </ExternalLink> if you want to know what Conformance really does.)</i> All these lead to higher control over the delivered quality and great organizational scalability.
        <Text mt='25px'>
          If you are interested in a real-life example your can read about <ExternalLink href='https://eng.lyft.com/changing-lanes-how-lyft-is-migrating-100-frontend-microservices-to-next-js-42199aaebd5f'>
            how and why Lyft
          </ExternalLink> migrated a 100 frontend microservices to Next.js.
        </Text>
      </Paragraph>
      <SubScore data={stage4score}/>
    </>
  )
}