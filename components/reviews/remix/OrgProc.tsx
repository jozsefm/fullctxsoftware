import { Flex, Image as ChakraImage } from '@chakra-ui/react'
import { Paragraph } from 'components/blog/PostElements'
import Image from 'next/image'
import { stage4score } from 'constants/scores/remix'
import { ExternalLink, ImageContribution, ImageWrapper, SubScore } from 'components/reviews/common'

export default function OrgProc() {
  return (
    <>
      <ImageWrapper>
        <Image priority layout='fill' src='/img/blog/remix/org1.jpg' objectFit='cover' objectPosition='0 57%'/>   
        <Flex pos='relative' zIndex='2' margin='0 auto' align='center'>
          <ChakraImage className='svg' width='90px' height='90px' src='/img/blog/remix/org.svg' />
        </Flex>
      </ImageWrapper>
      <ImageContribution>Photo by <a href="https://unsplash.com/@hugorrocha?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText" target='_blank'>Hugo Rocha</a> on <a href="https://unsplash.com/s/photos/sticky?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText" target='_blank'>Unsplash</a></ImageContribution>
      <Paragraph minorNext>
        <b>Short description</b>: This stage is concerned with the setup of roles and responsibilities inside the
        company/department/project and the breakdown and scheduling of tasks.
        It's also about the effectiveness and efficiency of the work processes.
        Our technical interest is to find the properties of the tools that influence these functions. (Process focus)
        There are 2 main components of process performance, the achievable level of control and the amount of generated wastes.
        All of this will turn into improved productivity and utilization and increased profits and reduced costs in the end.
      </Paragraph>
      <Paragraph minorNext>
        <b>Remix</b>: Many process related aspects of Remix are dependent on the deployment target, specifically the
        integrations it provides. The real goal here is to choose the infrastructure and workflow that minimizes process
        wastes like overdelivering, waiting or inventory. Without going into the details here, in practice, these mean you should
        not set up a complex system if the project needs don't justify it.
      </Paragraph>
      <Paragraph minorNext>
        Remix with its data handling capabilities, <ExternalLink href='https://kentcdodds.com/blog/how-i-built-a-modern-website-in-2021#database-interaction-with-prisma'>paired</ExternalLink> with modern tools like <ExternalLink href='https://www.prisma.io/'>Prisma</ExternalLink>,
        and utilizing a serverless deployment target is uniquely
        positioned to support full stack development. That helps in eliminating process wastes like
        underutilization, defects, motion and waiting. That means if your developers have the right skill set, you can
        work more efficiently by removing the overhead generated by a split BE/FE setup. 
      </Paragraph>
      <Paragraph minorNext>
        On the other hand, if you struggle to establish standards and conventions on a project it's not a wise choice
        to adopt a tool where the best practices haven't surfaced yet. It's not a Remix specific concern, it's the same with
        just about any new technology.
      </Paragraph>
      <Paragraph minorNext>
        Adopting a new technology, however, offers the opportunity to step up any competent programmer into a lead
        position without upsetting colleagues with many years of experience with another alternative solution.
        It might be just the right step from an organizational perspective to keep employees engaged and loyal
        or to balance some power struggles.
      </Paragraph>
      <SubScore data={stage4score}/>
    </>
  )
}